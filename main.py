from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
import requests
import nest_asyncio
nest_asyncio.apply()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ nest_asyncio –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ Jupyter/Colab
# import nest_asyncio
# nest_asyncio.apply()

TOKEN = "TG TOKEN"
API_KEY = "API TOKEN"  # –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ https://www.exchangerate-api.com/

# –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
POPULAR_CURRENCIES = {
    "USD": "üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê",
    "EUR": "üá™üá∫ –ï–≤—Ä–æ",
    "TRY": "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞",
    "THB": "üáπüá≠ –¢–∞–π—Å–∫–∏–π –±–∞—Ç",
    "KZT": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ",
    "JPY": "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞",
    "CNY": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å",
    "GEL": "üá¨üá™ –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏",
    "AED": "üá¶üá™ –û–ê–≠ –¥–∏—Ä—Ö–∞–º",
    "MVR": "üá≤üáª –ú–∞–ª—å–¥–∏–≤—Å–∫–∞—è —Ä—É—Ñ–∏—è",

}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ *–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –∏–∑ RUB* \n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 500.50)",
        parse_mode="Markdown"
    )

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        context.user_data['amount_rub'] = amount
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
        response = requests.get(f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/RUB")
        data = response.json()
        
        if data.get("result") != "success":
            raise Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")
            
        context.user_data['rates'] = data['conversion_rates']
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for currency_code, currency_name in POPULAR_CURRENCIES.items():
            keyboard.append([InlineKeyboardButton(
                f"{currency_name} ({currency_code})", 
                callback_data=f"convert_{currency_code}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {amount} RUB:",
            reply_markup=reply_markup
        )
            
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 500.50)")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def convert_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    currency_code = query.data.split('_')[1]
    amount_rub = context.user_data.get('amount_rub', 1)
    rates = context.user_data.get('rates', {})
    
    try:
        if not rates:
            raise Exception("–ö—É—Ä—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        rate = rates.get(currency_code)
        if not rate:
            raise Exception("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        result = amount_rub * rate
        currency_name = POPULAR_CURRENCIES.get(currency_code, currency_code)
        
        await query.edit_message_text(
            f"üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*\n\n"
            f"‚Ä¢ {amount_rub:.2f} RUB = {result:.2f} {currency_code}\n"
            f"‚Ä¢ –ö—É—Ä—Å: 1 RUB = {rate:.6f} {currency_code}\n\n"
            f"–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount))
    application.add_handler(CallbackQueryHandler(convert_currency, pattern="^convert_"))
    
    application.run_polling()

if __name__ == "__main__":
    main()